ridge.train.predict
benchmark.train.mae
ridge.train.mae <- sum(abs(ridge.train.predict - Y_ridge), na.rm = T) / length(ridge.train.predict)
lin.train.mae
summarise(ridge.train.predict)
plot(ridge.train.predict)
boxplot(ridge.train.predict)
X_ridge_test <- model.matrix(logerror ~ calculatedfinishedsquarefeet + hashottuborspa + propertycountylandusecode_2 + propertylandusetypeid_2 + regionidcity_2 + taxamount + taxdelinquencyflag + taxvaluedollarcnt, data = ztest)
dim(X_ridge_test)
ridge.test.predict <- predict(lin.ridge.bestsubset_1,newx = X_ridge_test, s = cv.lin.ridge.bestsubset$lambda.1se)
X_ridge_test
train_index <- zillow_full_small$transactiondate < "2016-10-01"
#create new factors for regionitcity
zillow_full_small$regionidcity <- factor(zillow_full_small$regionidcity)
zillow_full_small$regionidcity <- as.factor(zillow_full_small$regionidcity)
zillow_full_small$regionidcity <- as.character(zillow_full_small$regionidcity)
zillow_full_small$regionidcity_2 <- ifelse(zillow_full_small$regionidcity == "31134" | zillow_full_small$regionidcity == "46098" | zillow_full_small$regionidcity == "50749" | zillow_full_small$regionidcity == "54299" | zillow_full_small$regionidcity == "6822",
as.character(zillow_full_small$regionidcity),
"other")
zillow_full_small$regionidcity <- as.factor(zillow_full_small$regionidcity)
zillow_full_small$regionidcity_2 <- as.factor(zillow_full_small$regionidcity_2)
#create new factors for propertycountylandusecode
zillow_full_small$propertycountylandusecode <- factor(zillow_full_small$propertycountylandusecode)
zillow_full_small$propertycountylandusecode <- as.factor(zillow_full_small$propertycountylandusecode)
zillow_full_small$propertycountylandusecode <- as.character(zillow_full_small$propertycountylandusecode)
zillow_full_small$propertycountylandusecode_2 <- ifelse(zillow_full_small$propertycountylandusecode == "0101" | zillow_full_small$propertycountylandusecode == "040A" | zillow_full_small$propertycountylandusecode == "200",
as.character(zillow_full_small$propertycountylandusecode),
"other")
zillow_full_small$propertycountylandusecode <- as.factor(zillow_full_small$propertycountylandusecode)
zillow_full_small$propertycountylandusecode_2 <- as.factor(zillow_full_small$propertycountylandusecode_2)
#create new factors for propertylandusetypeid
zillow_full_small$propertylandusetypeid <- factor(zillow_full_small$propertylandusetypeid)
zillow_full_small$propertylandusetypeid <- as.factor(zillow_full_small$propertylandusetypeid)
zillow_full_small$propertylandusetypeid <- as.character(zillow_full_small$propertylandusetypeid)
zillow_full_small$propertylandusetypeid_2 <- ifelse(zillow_full_small$propertylandusetypeid == "247" | zillow_full_small$propertylandusetypeid == "248" | zillow_full_small$propertylandusetypeid == "263",
as.character(zillow_full_small$propertylandusetypeid),
"other")
zillow_full_small$propertylandusetypeid <- as.factor(zillow_full_small$propertylandusetypeid)
zillow_full_small$propertylandusetypeid_2 <- as.factor(zillow_full_small$propertylandusetypeid_2)
ztrain <- zillow_full_small[train_index,]
ztest <- zillow_full_small[!train_index,]
str(ztrain)
str(ztest)
fit.linear.bestsubsets <- lm(logerror ~ calculatedfinishedsquarefeet + hashottuborspa + propertycountylandusecode_2 + propertylandusetypeid_2 + regionidcity_2 + taxamount + taxdelinquencyflag + taxvaluedollarcnt, data = ztrain)
# summary(fit.linear.bestsubsets)
knitr::kable(round(summary(fit.linear.bestsubsets)$coefficients,4))
lin.train.predict <- predict(fit.linear.bestsubsets, ztrain)
benchmark.train.mae <- sum((abs(ztrain$logerror - mean(ztrain$logerror)))) / length(ztrain$logerror)
# benchmark.train.mae
lin.train.mae <- sum(abs(lin.train.predict - ztrain$logerror), na.rm = T) / length(lin.train.predict)
# lin.train.mae
lin.test.predict <- predict(fit.linear.bestsubsets, ztest)
benchmark.test.mae <- sum((abs(ztest$logerror - mean(ztrain$logerror)))) / length(ztest$logerror)
# benchmark.test.mae
lin.test.mae <- sum(abs(lin.test.predict - ztest$logerror), na.rm = T) / length(lin.test.predict)
# lin.test.mae
lin.result <- data.frame(row.names = c("Benchmark", "Model"), train = c(benchmark.train.mae, lin.train.mae), test = c(benchmark.test.mae, lin.test.mae))
names(lin.result) <- c("Training MAE", "Test MAE")
knitr::kable(round(lin.result,4))
X_ridge <- model.matrix(fit.linear.bestsubsets) #potential way to input into glmnet
Y_ridge <- as.matrix(model.frame(fit.linear.bestsubsets)[1], ncol = 1)
cv.lin.ridge.bestsubset <- cv.glmnet(x = X_ridge, y = Y_ridge, alpha = 0, nfolds = 8, type.measure = "mse", standardize = TRUE)
lin.ridge.bestsubset_1 <- glmnet(x = X_ridge, y = Y_ridge, alpha = 0, standardize = TRUE)
ridge.train.predict <- predict(lin.ridge.bestsubset_1,newx = X_ridge, s = cv.lin.ridge.bestsubset$lambda.1se)
benchmark.train.mae
ridge.train.mae <- sum(abs(ridge.train.predict - Y_ridge), na.rm = T) / length(ridge.train.predict)
lin.train.mae
benchmark.train.mae
ridge.train.mae <- sum(abs(ridge.train.predict - Y_ridge), na.rm = T) / length(ridge.train.predict)
lin.train.mae
X_ridge_test <- model.matrix(logerror ~ calculatedfinishedsquarefeet + hashottuborspa + propertycountylandusecode_2 + propertylandusetypeid_2 + regionidcity_2 + taxamount + taxdelinquencyflag + taxvaluedollarcnt, data = ztest)
dim(X_ridge_test)
ridge.test.predict <- predict(lin.ridge.bestsubset_1,newx = X_ridge_test, s = cv.lin.ridge.bestsubset$lambda.1se)
Y_ridge_test <- model.frame(logerror ~ calculatedfinishedsquarefeet + hashottuborspa + propertycountylandusecode_2 + propertylandusetypeid_2 + regionidcity_2 + taxamount + taxdelinquencyflag + taxvaluedollarcnt, data = ztest)[1]
dim(Y_ridge_test)
dim(X_ridge_test)
Y_ridge_test <- as.matrix(model.frame(logerror ~ calculatedfinishedsquarefeet + hashottuborspa + propertycountylandusecode_2 + propertylandusetypeid_2 + regionidcity_2 + taxamount + taxdelinquencyflag + taxvaluedollarcnt, data = ztest)[1], ncol = 1)
dim(X_ridge_test)
dim(Y_ridge_test)
benchmark.test.mae
ridge.test.mae <- sum(abs(ridge.test.predict - Y_ridge_test), na.rm = T) / length(ridge.test.predict)
lin.train.mae
plot(cv.lin.ridge.bestsubset)
summary(cv.lin.ridge.bestsubset)
lin.ridge.bestsubset_1 <- glmnet(x = X_ridge, y = Y_ridge, alpha = 0, standardize = TRUE)
plot(lin.ridge.bestsubset_1, xvar="lambda", label = TRUE)
abline(v=log(cv.lin.ridge.bestsubset$lambda.1se), lty="dashed")
coef(lin.ridge.bestsubset_1, s=c(cv.lin.ridge.bestsubset$lambda.1se, 0) )
ridge.result <- data.frame(row.names = c("Benchmark", "Model"), train = c(benchmark.train.mae, ridge.train.mae), test = c(benchmark.test.mae, ridge.test.mae))
names(ridge.result) <- c("Training MAE", "Test MAE")
knitr::kable(round(ridge.result,4))
plot(lin.ridge.bestsubset_1, xvar="lambda", label = TRUE)
abline(v=log(cv.lin.ridge.bestsubset$lambda.1se), lty="dashed")
plot(cv.lin.ridge.bestsubset)
localH2O = h2o.init(ip = "localhost", port = 54321, startH2O = TRUE, min_mem_size = "2g", max_mem_size = "3g", nthreads = -1)
nn.train <- cbind(Y_ridge, X_ridge)
nn.train
nn.test <- cbind(Y_ridge_test, X_ridge_test)
nn.z_train <- cbind(Y_ridge, X_ridge)
nn.z_test <- cbind(Y_ridge_test, X_ridge_test)
h2o.z_train <- as.h2o(nn.z_train)
h2o.z_test <- as.h2o(nn.z_test)
h2o.z.rf <- h2o.randomForest(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
ntrees = 200,
min_rows = 3)
h2o.performance(h2o.z.rf)
h2o.z.rf.predict.train <- h2o.predict(h2o.z.rf, h2o.z_train)
z.rf.train.mae <- sum(abs(h2o.z.rf.predict.train - nn.z_train[,1]), na.rm = T) / length(h2o.z.rf.predict.train)
h2o.z.rf.predict.train <- as.data.frame(h2o.predict(h2o.z.rf, h2o.z_train))
z.rf.train.mae <- sum(abs(h2o.z.rf.predict.train - nn.z_train[,1]), na.rm = T) / length(h2o.z.rf.predict.train)
z.rf.train.mae
length(h2o.z.rf.predict.train)
z.rf.train.mae <- sum(abs(h2o.z.rf.predict.train$predict - nn.z_train[,1]), na.rm = T) / length(h2o.z.rf.predict.train$predict)
z.rf.train.mae
length(h2o.z.rf.predict.train)
length(h2o.z.rf.predict.train$predict)
h2o.z.rf.predict.test <- as.data.frame(h2o.predict(h2o.z.rf, h2o.z_test))
z.rf.test.mae <- sum(abs(h2o.z.rf.predict.test$predict - nn.z_test[,1]), na.rm = T) / length(h2o.z.rf.predict.test$predict)
z.rf.test.mae
?h2o.deeplearning
h2o.z.dl <- h2o.deeplearning(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(12, 12),
activation = "RectifierWithDropout",
balance_classes = TRUE,
epochs = 10,
variable_importances = TRUE,
l1 = 1e-5)
h2o.z.dl <- h2o.deeplearning(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(12, 12),
activation = "RectifierWithDropout",
# balance_classes = TRUE,
epochs = 10,
variable_importances = TRUE,
l1 = 1e-5)
h2o.z.dl.predict.train <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_train))
z.dl.train.mae <- sum(abs(h2o.z.dl.predict.train$predict - nn.z_train[,1]), na.rm = T) / length(h2o.z.dl.predict.train$predict)
z.dl.train.mae
h2o.z.dl.predict.test <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_test))
z.dl.test.mae <- sum(abs(h2o.z.dl.predict.test$predict - nn.z_test[,1]), na.rm = T) / length(h2o.z.dl.predict.test$predict)
z.dl.test.mae
h2o.z.dl <- h2o.deeplearning(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(12, 12),
activation = "TanhWithDropout",
# balance_classes = TRUE,
epochs = 10,
variable_importances = TRUE,
l1 = 1e-5)
h2o.z.dl.predict.train <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_train))
z.dl.train.mae <- sum(abs(h2o.z.dl.predict.train$predict - nn.z_train[,1]), na.rm = T) / length(h2o.z.dl.predict.train$predict)
z.dl.train.mae
h2o.z.dl.predict.test <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_test))
z.dl.test.mae <- sum(abs(h2o.z.dl.predict.test$predict - nn.z_test[,1]), na.rm = T) / length(h2o.z.dl.predict.test$predict)
z.dl.test.mae
h2o.z.dl <- h2o.deeplearning(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(12, 12, 12),
activation = "RectifierWithDropout",
# balance_classes = TRUE,
epochs = 10,
variable_importances = TRUE,
l1 = 1e-5)
h2o.z.dl.predict.train <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_train))
z.dl.train.mae <- sum(abs(h2o.z.dl.predict.train$predict - nn.z_train[,1]), na.rm = T) / length(h2o.z.dl.predict.train$predict)
z.dl.train.mae
h2o.z.dl.predict.test <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_test))
z.dl.test.mae <- sum(abs(h2o.z.dl.predict.test$predict - nn.z_test[,1]), na.rm = T) / length(h2o.z.dl.predict.test$predict)
z.dl.test.mae
h2o.z.dl <- h2o.deeplearning(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(12, 12, 12, 12),
activation = "RectifierWithDropout",
# balance_classes = TRUE,
epochs = 10,
variable_importances = TRUE,
l1 = 1e-5)
h2o.z.dl.predict.train <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_train))
z.dl.train.mae <- sum(abs(h2o.z.dl.predict.train$predict - nn.z_train[,1]), na.rm = T) / length(h2o.z.dl.predict.train$predict)
z.dl.train.mae
h2o.z.dl.predict.test <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_test))
z.dl.test.mae <- sum(abs(h2o.z.dl.predict.test$predict - nn.z_test[,1]), na.rm = T) / length(h2o.z.dl.predict.test$predict)
z.dl.test.mae
h2o.z_train_full <- as.h2o(ztrain)
View(head(ztrain))
h2o.z_train_full <- as.h2o(ztrain[-c(18, 23, 24, 25)])
h2o.z_test_full <- as.h2o(ztest[-c(18, 23, 24, 25)])
h2o.z.dl.full <- h2o.deeplearning(x = 2:ncol(h2o.z_train_full),
y = 1,
training_frame = h2o.z_train_full,
validation_frame = h2o.z_test_full,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(200, 200),
activation = "RectifierWithDropout",
# balance_classes = TRUE,
epochs = 10,
variable_importances = TRUE,
l1 = 1e-5)
h2o.z.dl.predict.train_full <- as.data.frame(h2o.predict(h2o.z.dl.full, h2o.z_train_full))
z.dl.train.full.mae <- sum(abs(h2o.z.dl.predict.train_full$predict - h2o.z_train_full[,1]), na.rm = T) / length(h2o.z.dl.predict.train_full$predict)
h2o.z_train_full
h2o.z_train_full[,1]
z.dl.train.full.mae <- sum(abs(h2o.z.dl.predict.train_full$predict - data.frame(h2o.z_train_full[,1])$logerror), na.rm = T) / length(h2o.z.dl.predict.train_full$predict)
data.frame(h2o.z_train_full[,1])
as.data.frame(h2o.z_train_full[,1])
z.dl.train.full.mae <- sum(abs(h2o.z.dl.predict.train_full$predict - as.data.frame(h2o.z_train_full[,1])$logerror), na.rm = T) / length(h2o.z.dl.predict.train_full$predict)
z.dl.train.full.mae
h2o.z.dl.predict.test_full <- as.data.frame(h2o.predict(h2o.z.dl.full, h2o.z_test_full))
z.dl.test.full.mae <- sum(abs(h2o.z.dl.predict.test_full$predict - as.data.frame(h2o.z_test_full[,1])$logerror), na.rm = T) / length(h2o.z.dl.predict.test_full$predict)
z.dl.test.full.mae
plot(h2o.z.dl.full@model$scoring_history$validation_mae)
h2o.z.dl.full <- h2o.deeplearning(x = 2:ncol(h2o.z_train_full),
y = 1,
training_frame = h2o.z_train_full,
validation_frame = h2o.z_test_full,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(200, 200, 200),
activation = "RectifierWithDropout",
# balance_classes = TRUE,
epochs = 50,
variable_importances = TRUE,
l1 = 1e-5)
#nn with full data
h2o.z.dl.predict.train_full <- as.data.frame(h2o.predict(h2o.z.dl.full, h2o.z_train_full))
z.dl.train.full.mae <- sum(abs(h2o.z.dl.predict.train_full$predict - as.data.frame(h2o.z_train_full[,1])$logerror), na.rm = T) / length(h2o.z.dl.predict.train_full$predict)
z.dl.train.full.mae
h2o.z.dl.predict.test_full <- as.data.frame(h2o.predict(h2o.z.dl.full, h2o.z_test_full))
z.dl.test.full.mae <- sum(abs(h2o.z.dl.predict.test_full$predict - as.data.frame(h2o.z_test_full[,1])$logerror), na.rm = T) / length(h2o.z.dl.predict.test_full$predict)
z.dl.test.full.mae
plot(h2o.z.dl.full@model$scoring_history$validation_mae)
h2o.z.dl <- h2o.deeplearning(x = 2:ncol(nn.z_train),
y = 1,
training_frame = h2o.z_train,
validation_frame = h2o.z_test,
input_dropout_ratio = 0.2,
# hidden_dropout_ratios = 0.5,
hidden = c(12, 12, 12),
activation = "RectifierWithDropout",
# balance_classes = TRUE,
epochs = 30,
variable_importances = TRUE,
l1 = 1e-5)
#nn with just lm data
h2o.z.dl.predict.train <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_train))
z.dl.train.mae <- sum(abs(h2o.z.dl.predict.train$predict - nn.z_train[,1]), na.rm = T) / length(h2o.z.dl.predict.train$predict)
z.dl.train.mae
h2o.z.dl.predict.test <- as.data.frame(h2o.predict(h2o.z.dl, h2o.z_test))
z.dl.test.mae <- sum(abs(h2o.z.dl.predict.test$predict - nn.z_test[,1]), na.rm = T) / length(h2o.z.dl.predict.test$predict)
z.dl.test.mae
plot(h2o.z.dl@model$scoring_history$validation_mae)
saveRDS(,".rds")
saveRDS(h2o.z.rf.predict.train,"h2o.z.rf.predict.train.rds")
saveRDS(z.rf.train.mae,"z.rf.train.mae.rds")
saveRDS(h2o.z.rf.predict.test,"h2o.z.rf.predict.test.rds")
saveRDS(z.rf.test.mae,"z.rf.test.mae.rds")
saveRDS(h2o.z.dl.predict.train,"h2o.z.dl.predict.train.rds")
saveRDS(z.dl.train.mae,"z.dl.train.mae.rds")
saveRDS(h2o.z.dl.predict.test,"h2o.z.dl.predict.test.rds")
saveRDS(z.dl.test.mae,"z.dl.test.mae.rds")
saveRDS(h2o.z.dl.predict.train_full,"h2o.z.dl.predict.train_full.rds")
saveRDS(z.dl.train.full.mae,"z.dl.train.full.mae.rds")
saveRDS(z.dl.test.full.mae,"z.dl.test.full.mae.rds")
saveRDS(z.dl.test.full.mae,"z.dl.test.full.mae.rds")
saveRDS(h2o.z.rf.predict.train,"h2o.z.rf.predict.train.rds")
saveRDS(z.rf.train.mae,"z.rf.train.mae.rds")
saveRDS(h2o.z.rf.predict.test,"h2o.z.rf.predict.test.rds")
saveRDS(z.rf.test.mae,"z.rf.test.mae.rds")
saveRDS(h2o.z.dl.predict.train,"h2o.z.dl.predict.train.rds")
saveRDS(z.dl.train.mae,"z.dl.train.mae.rds")
saveRDS(h2o.z.dl.predict.test,"h2o.z.dl.predict.test.rds")
saveRDS(z.dl.test.mae,"z.dl.test.mae.rds")
saveRDS(h2o.z.dl.predict.train_full,"h2o.z.dl.predict.train_full.rds")
saveRDS(z.dl.train.full.mae,"z.dl.train.full.mae.rds")
saveRDS(h2o.z.dl.predict.test_full,"h2o.z.dl.predict.test_full.rds")
saveRDS(z.dl.test.full.mae,"z.dl.test.full.mae.rds")
h2o.shutdown(FALSE)
nm <- 9
overall_results_z <- data.frame(classifier = character(nm), trainmae = character(nm), testmae = character(nm), notes = character(nm), stringsAsFactors = F)
#Benchmark using mean
overall_results_z$classifier[1] <- "Benchmark using training mean"
overall_results_z$trainmae[1] <- benchmark.train.mae
overall_results_z$testmae[1] <- benchmark.test.mae
overall_results_z$notes[1] <- "NA"
View(overall_results_z)
nm <- 9
overall_results_z <- data.frame(classifier = character(nm), trainmae = character(nm), testmae = character(nm), notes = character(nm), stringsAsFactors = F)
#Benchmark using mean
overall_results_z$classifier[1] <- "Benchmark using training mean"
overall_results_z$trainmae[1] <- round(benchmark.train.mae,4)
overall_results_z$testmae[1] <- round(benchmark.test.mae,4)
overall_results_z$notes[1] <- "NA"
nm <- 6
overall_results_z <- data.frame(classifier = character(nm), trainmae = character(nm), testmae = character(nm), notes = character(nm), stringsAsFactors = F)
#Benchmark using mean
overall_results_z$classifier[1] <- "Benchmark using training mean"
overall_results_z$trainmae[1] <- round(benchmark.train.mae,4)
overall_results_z$testmae[1] <- round(benchmark.test.mae,4)
overall_results_z$notes[1] <- "NA"
#Multiple regression
overall_results_z$classifier[2] <- "Multiple regression after subsetting"
overall_results_z$trainmae[2] <- round(lin.train.mae,4)
overall_results_z$testmae[2] <- round(lin.test.mae,4)
overall_results_z$notes[2] <- "16 predictors used"
#Ridge regression
overall_results_z$classifier[3] <- "Ridge regression"
overall_results_z$trainmae[3] <- round(ridge.train.mae,4)
overall_results_z$testmae[3] <- round(ridge.test.mae,4)
overall_results_z$notes[3] <- "Lambda chosen at one standard error"
#Random forest
overall_results_z$classifier[4] <- "Random forest"
overall_results_z$trainmae[4] <- round(z.rf.train.mae,4)
overall_results_z$testmae[4] <- round(z.rf.test.mae,4)
overall_results_z$notes[4] <- "200 trees, 3 minimum observations at leaves"
#Neural network 1
overall_results_z$classifier[5] <- "Neural network 1"
overall_results_z$trainmae[5] <- round(z.dl.train.mae,4)
overall_results_z$testmae[5] <- round(z.dl.test.mae,4)
overall_results_z$notes[5] <- "16 subset predictors; (12, 12, 12); Rectifier with dropout"
#Neural network 2
overall_results_z$classifier[6] <- "Neural network 2"
overall_results_z$trainmae[6] <- round(benchmark.train.mae,4)
overall_results_z$testmae[6] <- round(benchmark.test.mae,4)
overall_results_z$notes[6] <- "All predictors; (200, 200, 200); Rectifier with dropout"
saveRDS(overall_results_z, "overall_results_z.rds")
names(overall_results_z) <- c("Model", "Training MAE", "Test MAE", "Notes")
overall_results_z[order(overall_results_z$`Test MAE`, decreasing = T)]
overall_results_z[order(overall_results_z$`Test MAE`, decreasing = T),]
overall_results_z <- overall_results_z[order(overall_results_z$`Test MAE`, decreasing = F),]
knitr::kable(overall_results_z, row.names = F)
z.dl_full.result <- data.frame(row.names = c("Benchmark", "Model"), train = c(benchmark.train.mae, z.dl.train.full.mae), test = c(benchmark.test.mae, z.dl.test.full.mae))
names(z.rf.result) <- c("Training MAE", "Test MAE")
z.dl_full.result <- data.frame(row.names = c("Benchmark", "Model"), train = c(benchmark.train.mae, z.dl.train.full.mae), test = c(benchmark.test.mae, z.dl.test.full.mae))
names(z.dl_full.result) <- c("Training MAE", "Test MAE")
knitr::kable(round(z.dl_full.result,4))
z.dl.result <- data.frame(row.names = c("Benchmark", "Model"), train = c(benchmark.train.mae, z.dl.train.mae), test = c(benchmark.test.mae, z.dl.test.mae))
names(z.dl.result) <- c("Training MAE", "Test MAE")
knitr::kable(round(z.dl.result,4))
z.rf.result <- data.frame(row.names = c("Benchmark", "Model"), train = c(benchmark.train.mae, z.rf.train.mae), test = c(benchmark.test.mae, z.rf.test.mae))
names(z.rf.result) <- c("Training MAE", "Test MAE")
knitr::kable(round(z.rf.result,4))
data.frame(x = 1:50, forward = fit.ss.f.lin.summary$bic[1:50], backward = fit.ss.b.lin.summary$bic[1:50]) %>%
ggplot()+
geom_line(aes(x = x, y = forward, colour = "Forward"))+
geom_line(aes(x = x, y = backward, colour = "Backward"))+
geom_vline(xintercept = 16, col = 1, size = 0.5, linetype = 2)+
annotate("text", x = 16, y = -150, label = " Number of predictor variables: 16", hjust = 0)+
scale_x_continuous(name = "Number of predictor variables")+
scale_y_continuous(name = "BIC")+
labs(title="Selecting the optimal number of predictor variables based on best subset selection")+
scale_color_discrete(name = "Search")+
theme_light()
#LOAD
zillowData <- fread("/Users/blakecuningham/Documents/DataScienceData/Kaggle_C_Zillow1/properties_2016.csv", showProgress = T)
# zillowData <- fread("E:\\DataScienceData\\Kaggle_C_Zillow1\\properties_2016.csv", showProgress = T)
zillow_t_data <- read.csv("/Users/blakecuningham/Documents/DataScienceData/Kaggle_C_Zillow1/train_2016.csv")
# train_data <- read.csv("E:\\DataScienceData\\Kaggle_C_Zillow1\\train_2016.csv")
zillow_t_data$transactiondate <- as.POSIXct(zillow_t_data$transactiondate)
zillow_full <- merge(zillow_t_data, zillowData, by = "parcelid") #left join only?
#CLEAN AND FORMAT
#order data by transaction date
zillow_full <- zillow_full[order(zillow_full$transactiondate),]
#remove missing variables from consideration
zillow_full_small <- zillow_full[,c(
# "buildingclasstypeid",
# "finishedsquarefeet13",
# "basementsqft",
# "storytypeid",
# "yardbuildingsqft26",
# "architecturalstyletypeid",
# "typeconstructiontypeid",
# "finishedsquarefeet6",
# "decktypeid",
# "poolsizesum",
# "pooltypeid10",
# "pooltypeid2",
# "taxdelinquencyyear",
# "yardbuildingsqft17",
# "finishedsquarefeet15",
# "finishedfloor1squarefeet",
# "finishedsquarefeet50",
# "fireplacecnt",
# "threequarterbathnbr",
# "pooltypeid7",
# "poolcnt",
# "numberofstories",
# "airconditioningtypeid",
# "garagecarcnt",
# "garagetotalsqft",
# "regionidneighborhood",
# "heatingorsystemtypeid",
# "buildingqualitytypeid",
# "unitcnt",
# "lotsizesquarefeet",
"finishedsquarefeet12",
"regionidcity",
"calculatedbathnbr",
"fullbathcnt",
"yearbuilt",
"calculatedfinishedsquarefeet",
"censustractandblock",
"structuretaxvaluedollarcnt",
"regionidzip",
"taxamount",
"taxvaluedollarcnt",
"landtaxvaluedollarcnt",
"bathroomcnt",
"bedroomcnt",
"fips",
"latitude",
"longitude",
"propertylandusetypeid",
"rawcensustractandblock",
"regionidcounty",
"roomcnt",
"assessmentyear",
"parcelid",
"logerror",
"transactiondate",
"hashottuborspa",
"propertycountylandusecode",
"propertyzoningdesc",
"fireplaceflag",
"taxdelinquencyflag"
)]
zillow_full_small$regionidcity <- as.factor(zillow_full_small$regionidcity)
zillow_full_small$censustractandblock <- as.factor(zillow_full_small$censustractandblock)
zillow_full_small$regionidzip <- as.factor(zillow_full_small$regionidzip)
zillow_full_small$propertylandusetypeid <- as.factor(zillow_full_small$propertylandusetypeid)
zillow_full_small$rawcensustractandblock <- as.factor(zillow_full_small$rawcensustractandblock)
zillow_full_small$regionidcounty <- as.factor(zillow_full_small$regionidcounty)
zillow_full_small$propertycountylandusecode <- as.factor(zillow_full_small$propertycountylandusecode)
zillow_full_small$propertyzoningdesc <- as.factor(zillow_full_small$propertyzoningdesc)
zillow_full_small$fireplaceflag <- as.factor(zillow_full_small$fireplaceflag)
zillow_full_small$taxdelinquencyflag <- as.factor(zillow_full_small$taxdelinquencyflag)
zillow_full_small$hashottuborspa <- as.factor(zillow_full_small$hashottuborspa)
zillow_full_small$parcelid <- as.factor(zillow_full_small$parcelid)
zillow_full_small$taxdelinquencyflag <- ifelse(zillow_full_small$taxdelinquencyflag == "Y", TRUE, FALSE)
zillow_full_small$fireplaceflag <- ifelse(zillow_full_small$fireplaceflag == "true", TRUE, FALSE)
zillow_full_small$hashottuborspa <- ifelse(zillow_full_small$hashottuborspa == "true", TRUE, FALSE)
row.names(zillow_full_small) <- 1:nrow(zillow_full_small)
zillow_full_small_2 <- zillow_full_small
zillow_full_small <- zillow_full_small[, c("logerror", names(zillow_full_small)[(!names(zillow_full_small) %in% c("logerror", "parcelid", "rawcensustractandblock", "censustractandblock", "regionidzip", "propertyzoningdesc", "finishedsquarefeet12", "bathroomcnt", "assessmentyear"))])]
train_index <- zillow_full_small$transactiondate < "2016-10-01"
ztrain <- zillow_full_small[train_index,]
ztest <- zillow_full_small[!train_index,]
saveRDS(zillow_full, "zillow_full.rds")
saveRDS(zillow_full, "zillow_full.rds")
dim(zillow_full)
saveRDS(zillow_full, "zillow_full.rds")
saveRDS(zillow_full, "zillow_full.rds")
saveRDS(zillow_full_small, "zillow_full_small.rds")
saveRDS(zillow_full, "zillow_full.rds")
saveRDS(zillow_full, "zillow_full.rds")
nm <- 6
overall_results_z <- data.frame(classifier = character(nm), trainmae = character(nm), testmae = character(nm), notes = character(nm), stringsAsFactors = F)
#Benchmark using mean
overall_results_z$classifier[1] <- "Benchmark using training mean"
overall_results_z$trainmae[1] <- round(benchmark.train.mae,4)
overall_results_z$testmae[1] <- round(benchmark.test.mae,4)
overall_results_z$notes[1] <- "NA"
#Multiple regression
overall_results_z$classifier[2] <- "Multiple regression after subsetting"
overall_results_z$trainmae[2] <- round(lin.train.mae,4)
overall_results_z$testmae[2] <- round(lin.test.mae,4)
overall_results_z$notes[2] <- "16 predictors used"
#Ridge regression
overall_results_z$classifier[3] <- "Ridge regression"
overall_results_z$trainmae[3] <- round(ridge.train.mae,4)
overall_results_z$testmae[3] <- round(ridge.test.mae,4)
overall_results_z$notes[3] <- "Lambda chosen at one standard error"
#Random forest
overall_results_z$classifier[4] <- "Random forest"
overall_results_z$trainmae[4] <- round(z.rf.train.mae,4)
overall_results_z$testmae[4] <- round(z.rf.test.mae,4)
overall_results_z$notes[4] <- "200 trees, 3 minimum observations at leaves"
#Neural network 1
overall_results_z$classifier[5] <- "Neural network 1"
overall_results_z$trainmae[5] <- round(z.dl.train.mae,4)
overall_results_z$testmae[5] <- round(z.dl.test.mae,4)
overall_results_z$notes[5] <- "16 subset predictors; (12, 12, 12); Rectifier with dropout"
#Neural network 2
overall_results_z$classifier[6] <- "Neural network 2"
overall_results_z$trainmae[6] <- round(z.dl.train.full.mae,4)
overall_results_z$testmae[6] <- round(z.dl.test.full.mae,4)
overall_results_z$notes[6] <- "All predictors; (200, 200, 200); Rectifier with dropout"
saveRDS(overall_results_z, "overall_results_z.rds")
